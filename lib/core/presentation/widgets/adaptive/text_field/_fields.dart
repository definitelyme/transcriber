part of './adaptive_text_field.dart';

extension FormFields on _AdaptiveTextFormInputState {
  Widget get _cupertinoTextField => Disabled(
        disabled: widget.disabled,
        child: CupertinoTextField.borderless(
          decoration: widget.validate && widget.errorText != null
              ? _cupertinoData.decoration.copyWith(border: Border.all(color: Palette.errorRed, width: 1.5))
              : _cupertinoData.decoration.copyWith(border: _cupertinoData.decoration.border),
          maxLines: widget.minLines == null ? widget.maxLines : null,
          minLines: widget.minLines,
          expands: widget.minLines == null && widget.maxLines == null ? widget.expands : false,
          maxLength: widget.showMaxLength ? widget.maxLength : null,
          maxLengthEnforcement: widget.showMaxLength ? widget.maxLengthEnforcement : null,
          enableSuggestions: widget.enableSuggestions,
          enableInteractiveSelection: widget.enableInteractiveSelection,
          obscureText: widget.obscureText,
          autocorrect: widget.autoCorrect,
          autofocus: widget.autoFocus,
          controller: _textEditingController,
          showCursor: widget.showCursor,
          cursorColor: _cursorColor,
          keyboardType: widget.keyboardType,
          textCapitalization: widget.capitalization,
          keyboardAppearance: _keyboardAppearance,
          textInputAction: widget.action ?? (widget.next == null ? TextInputAction.done : TextInputAction.next),
          focusNode: widget.focus,
          readOnly: widget.readOnly ?? widget.disabled,
          enabled: !widget.disabled,
          onTap: widget.onTap,
          autofillHints: _autoFillHints,
          textAlign: widget.textAlign,
          textDirection: widget.textDirection,
          toolbarOptions: widget.toolbarOptions,
          selectionControls: widget.selectionControls,
          textAlignVertical: widget.textAlignVertical,
          inputFormatters: [
            if (widget.maxLength != null) LengthLimitingTextInputFormatter(widget.maxLength),
            ...widget.inputFormatters,
          ],
          style: widget.disabled ? _disabledTextStyle : _textStyle,
          onChanged: widget.onChanged,
          onSubmitted: (_) => widget.onFieldSubmitted != null
              ? widget.onFieldSubmitted!(_)
              : (widget.next == null ? FocusScope.of(context).unfocus() : _setNewFocus()),
          onEditingComplete: () => widget.onEditingComplete != null
              ? widget.onEditingComplete!()
              : (widget.next == null ? FocusScope.of(context).unfocus() : _setNewFocus()),
          clearButtonMode: _cupertinoData.clearButtonMode,
          prefix: _cupertinoData.prefix,
          prefixMode: _cupertinoData.prefixMode,
          suffix: _cupertinoData.suffix,
          suffixMode: _cupertinoData.suffixMode,
          padding: _cupertinoData.padding,
          placeholder: widget.hintText,
          placeholderStyle: _hintTextStyle,
        ),
      );

  Widget get _cupertinoTextFormField => CupertinoTextFormFieldRow(
        decoration: _cupertinoData.decoration.copyWith(
          color: widget.validate && widget.errorText != null ? Palette.errorRed : null,
        ),
        maxLines: widget.minLines == null ? widget.maxLines : null,
        minLines: widget.minLines,
        expands: widget.minLines == null && widget.maxLines == null ? widget.expands : false,
        maxLength: widget.showMaxLength ? widget.maxLength : null,
        enableSuggestions: widget.enableSuggestions,
        enableInteractiveSelection: widget.enableInteractiveSelection,
        obscureText: widget.obscureText,
        autocorrect: widget.autoCorrect,
        autofocus: widget.autoFocus,
        controller: _textEditingController,
        showCursor: widget.showCursor,
        cursorColor: _cursorColor,
        keyboardType: widget.keyboardType,
        textCapitalization: widget.capitalization,
        keyboardAppearance: _keyboardAppearance,
        textInputAction: widget.action ?? (widget.next == null ? TextInputAction.done : TextInputAction.next),
        focusNode: widget.focus,
        readOnly: widget.readOnly ?? widget.disabled,
        enabled: !widget.disabled,
        onTap: widget.onTap,
        autofillHints: _autoFillHints,
        textAlign: widget.textAlign,
        textDirection: widget.textDirection,
        toolbarOptions: widget.toolbarOptions,
        selectionControls: widget.selectionControls,
        textAlignVertical: widget.textAlignVertical,
        padding: _cupertinoData.padding,
        inputFormatters: [
          if (widget.maxLength != null) LengthLimitingTextInputFormatter(widget.maxLength),
          ...widget.inputFormatters,
        ],
        style: widget.disabled ? _disabledTextStyle : _textStyle,
        onChanged: widget.onChanged,
        autovalidateMode: widget.validate ? AutovalidateMode.always : AutovalidateMode.disabled,
        validator: widget.validator ?? (widget.validate ? (_) => widget.errorText : null),
        prefix: _cupertinoData.prefix,
        placeholder: widget.hintText,
        placeholderStyle: _hintTextStyle,
        onFieldSubmitted: (_) => widget.onFieldSubmitted != null
            ? widget.onFieldSubmitted!(_)
            : (widget.next == null ? FocusScope.of(context).unfocus() : _setNewFocus()),
        onEditingComplete: () => widget.onEditingComplete != null
            ? widget.onEditingComplete!()
            : (widget.next == null ? FocusScope.of(context).unfocus() : _setNewFocus()),
      );

  Widget get _materialTextFormField => Disabled(
        opacity: 0.7,
        disabled: widget.disabled,
        child: Material(
          type: MaterialType.transparency,
          child: TextFormField(
            maxLines: widget.minLines == null ? widget.maxLines : null,
            minLines: widget.minLines,
            expands: widget.minLines == null && widget.maxLines == null ? widget.expands : false,
            maxLength: widget.showMaxLength ? widget.maxLength : null,
            maxLengthEnforcement: widget.showMaxLength ? widget.maxLengthEnforcement : null,
            enableSuggestions: widget.enableSuggestions,
            enableInteractiveSelection: widget.enableInteractiveSelection,
            obscureText: widget.obscureText,
            autocorrect: widget.autoCorrect,
            autofocus: widget.autoFocus,
            controller: _textEditingController,
            showCursor: widget.showCursor,
            cursorColor: _cursorColor,
            keyboardType: widget.keyboardType,
            textCapitalization: widget.capitalization,
            keyboardAppearance: _keyboardAppearance,
            textInputAction: widget.action ?? (widget.next == null ? TextInputAction.done : TextInputAction.next),
            focusNode: widget.focus,
            readOnly: widget.readOnly ?? widget.disabled,
            enabled: !widget.disabled,
            onTap: widget.onTap,
            autofillHints: _autoFillHints,
            textAlign: widget.textAlign,
            textDirection: widget.textDirection,
            toolbarOptions: widget.toolbarOptions,
            selectionControls: widget.selectionControls,
            textAlignVertical: widget.textAlignVertical,
            inputFormatters: [
              if (widget.maxLength != null) LengthLimitingTextInputFormatter(widget.maxLength),
              ...widget.inputFormatters,
            ],
            style: widget.disabled ? _disabledTextStyle : _textStyle,
            onChanged: widget.onChanged,
            validator: widget.validator ?? ((value) => widget.errorText),
            autovalidateMode: widget.validate ? AutovalidateMode.always : AutovalidateMode.disabled,
            onFieldSubmitted: (_) => widget.onFieldSubmitted != null
                ? widget.onFieldSubmitted!(_)
                : (widget.next == null ? FocusScope.of(context).unfocus() : _setNewFocus()),
            onEditingComplete: () => widget.onEditingComplete != null
                ? widget.onEditingComplete!()
                : (widget.next == null ? FocusScope.of(context).unfocus() : _setNewFocus()),
            decoration: InputDecoration(
              hintText: widget.hintText,
              hintStyle: _hintTextStyle,
              labelText: widget.label,
              labelStyle: widget.labelStyle,
              enabled: !widget.disabled,
              border: widget.border,
              enabledBorder: widget.enabledBorder,
              disabledBorder: widget.disabledBorder,
              focusedErrorBorder: widget.focusedErrorBorder,
              errorBorder: widget.errorBorder,
              filled: widget.filled,
              isDense: widget.dense,
              alignLabelWithHint: widget.alignLabelWithHint,
              floatingLabelBehavior: widget.floatingLabelBehavior,
              contentPadding: _materialData.padding,
              focusedBorder: widget.focusBorder ?? widget.border,
              fillColor: widget.fillColor,
              prefix: widget.prefix,
              suffix: widget.suffix,
              prefixIcon: _materialData.prefixIcon,
              prefixText: widget.prefixText,
              prefixStyle: widget.prefixStyle,
              prefixIconColor: _materialData.prefixIconColor,
              prefixIconConstraints: _materialData.prefixIconConstraints,
              suffixIcon: _materialData.suffixIcon,
              suffixText: _materialData.suffixText,
              suffixStyle: _materialData.suffixStyle,
              suffixIconColor: _materialData.suffixIconColor,
              suffixIconConstraints: _materialData.suffixIconConstraints,
              errorStyle: _errorTextStyle,
            ).merge(widget.decoration),
          ),
        ),
      );

  Widget get _materialTextField => TextField(
        maxLines: widget.minLines == null ? widget.maxLines : null,
        minLines: widget.minLines,
        expands: widget.minLines == null && widget.maxLines == null ? widget.expands : false,
        maxLength: widget.showMaxLength ? widget.maxLength : null,
        maxLengthEnforcement: widget.showMaxLength ? widget.maxLengthEnforcement : null,
        enableSuggestions: widget.enableSuggestions,
        enableInteractiveSelection: widget.enableInteractiveSelection,
        obscureText: widget.obscureText,
        autocorrect: widget.autoCorrect,
        autofocus: widget.autoFocus,
        controller: _textEditingController,
        showCursor: widget.showCursor,
        cursorColor: _cursorColor,
        keyboardType: widget.keyboardType,
        textCapitalization: widget.capitalization,
        keyboardAppearance: _keyboardAppearance,
        textInputAction: widget.action ?? (widget.next == null ? TextInputAction.done : TextInputAction.next),
        focusNode: widget.focus,
        readOnly: widget.readOnly ?? widget.disabled,
        enabled: !widget.disabled,
        onTap: widget.onTap,
        autofillHints: _autoFillHints,
        textAlign: widget.textAlign,
        textDirection: widget.textDirection,
        toolbarOptions: widget.toolbarOptions,
        selectionControls: widget.selectionControls,
        textAlignVertical: widget.textAlignVertical,
        inputFormatters: [
          if (widget.maxLength != null) LengthLimitingTextInputFormatter(widget.maxLength),
          ...widget.inputFormatters,
        ],
        style: widget.disabled ? _disabledTextStyle : _textStyle,
        onChanged: widget.onChanged,
        onSubmitted: (_) => widget.onFieldSubmitted != null
            ? widget.onFieldSubmitted!(_)
            : (widget.next == null ? FocusScope.of(context).unfocus() : _setNewFocus()),
        onEditingComplete: () => widget.onEditingComplete != null
            ? widget.onEditingComplete!()
            : (widget.next == null ? FocusScope.of(context).unfocus() : _setNewFocus()),
        decoration: InputDecoration(
          hintText: widget.hintText,
          hintStyle: _hintTextStyle,
          labelText: widget.label,
          labelStyle: widget.labelStyle,
          enabled: !widget.disabled,
          border: widget.border,
          enabledBorder: widget.enabledBorder,
          disabledBorder: widget.disabledBorder,
          focusedErrorBorder: widget.focusedErrorBorder,
          errorBorder: widget.errorBorder,
          filled: widget.filled,
          isDense: widget.dense,
          alignLabelWithHint: widget.alignLabelWithHint,
          floatingLabelBehavior: widget.floatingLabelBehavior,
          contentPadding: _materialData.padding,
          focusedBorder: widget.focusBorder ?? widget.border,
          fillColor: widget.fillColor,
          prefix: widget.prefix,
          suffix: widget.suffix,
          prefixIcon: _materialData.prefixIcon,
          prefixText: widget.prefixText,
          prefixStyle: widget.prefixStyle,
          prefixIconColor: _materialData.prefixIconColor,
          prefixIconConstraints: _materialData.prefixIconConstraints,
          suffixIcon: _materialData.suffixIcon,
          suffixText: _materialData.suffixText,
          suffixStyle: _materialData.suffixStyle,
          suffixIconColor: _materialData.suffixIconColor,
          suffixIconConstraints: _materialData.suffixIconConstraints,
          errorStyle: _errorTextStyle,
        ).merge(widget.decoration),
      );
}
